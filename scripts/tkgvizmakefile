#!/usr/bin/perl
# -*- perl -*-

# Author: Slaven Rezic
#
# Copyright (C) 2002,2003 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/

use GraphViz::Makefile;
use strict;
use warnings;
our $VERSION = '1.09';

{
    package Tk::Canvas;

    # from Tk::CanvasUtil
    sub center_view {
        my ($c, $x, $y, %args) = @_;
        my @xview = $c->xview;
        my @yview = $c->yview;
        my $xwidth = $xview[1]-$xview[0];
        my $ywidth = $yview[1]-$yview[0];
        my @scrollregion = ($Tk::VERSION == 800.017
                            ? $c->cget(-scrollregion)
                            : @{$c->cget(-scrollregion)});
        my $see_view = $c->{Configure}{-seeview} || 'see_view';
        if (!defined $x || !defined $y) {
            $c->$see_view(0.5, 0.5, %args);
        } else {
            $c->$see_view
                (
                 ($x-$scrollregion[0])/($scrollregion[2]-$scrollregion[0])
                 - $xwidth/2,
                 ($y-$scrollregion[1])/($scrollregion[3]-$scrollregion[1])
                 - $ywidth/2,
                 %args
                );
        }
    }

    sub see_view {
        my($c, $tox, $toy) = @_;
        $c->xview('moveto' => $tox);
        $c->yview('moveto' => $toy);
    }

}

package main;
use Getopt::Long;

$ENV{MAKE}="make" if !defined $ENV{MAKE}; # to propagate MAKE to submakefiles

my $file       = "Makefile";
my $outputtype = "tkcanvas";
my $outputfile;
my $prefix = "";
my $reversed = 0;
if (!GetOptions("f|file=s" => \$file,
                "T=s" => \$outputtype,
                "o=s" => \$outputfile,
                "v!"  => \$GraphViz::Makefile::V,
                "prefix=s" => \$prefix,
                "reversed!" => \$reversed,
               )) {
    require Pod::Usage;
    Pod::Usage::pod2usage(1);
}
my $rule = shift || "all";
my $gm_args = {};
my $graphviz = generate_graphviz($file, $prefix, $reversed, $gm_args);

if ($outputtype eq 'tkcanvas') {
    tkcanvas_output($rule, $graphviz, $prefix, $reversed, $gm_args);
} else {
    die "-o is missing" if !defined $outputfile;
    if ($outputtype eq 'canon') {
        open my $fh, '>', $outputfile or die "$outputfile: $!";
        print $fh $graphviz->dot_input;
        exit;
    }
    $graphviz->run(format => $outputtype, output_file => $outputfile);
}

sub generate_graphviz {
    my ($file, $prefix, $reversed, $gm_args) = @_;
    my $gm = GraphViz::Makefile->new(undef, $file, $prefix, %$gm_args);
    my $g = GraphViz2->new(
        $reversed ? (edge => { dir => 'back' }, graph => { rankdir => 'BT' }) : (),
        global => { combine_node_and_port => 0, directed => 1 },
    );
    $g->from_graph(GraphViz::Makefile::graphvizify($gm->generate_graph));
    $g;
}

sub tkcanvas_output {
    my ($rule, $graphviz, $prefix, $reversed, $gm_args) = @_;
    require Tk;
    require Tk::GraphViz;
    my $mw = MainWindow->new;
    my $c;
    $mw->configure(-menu => $mw->Menu(-menuitems => [
        [Cascade => "~File", -menuitems => [
            [Button => "~Open", -command => sub { choose_new_file($mw, $prefix, $reversed, $gm_args) }],
            [Button => "E~xit", -command => sub { $mw->destroy }],
        ]],
        [Cascade => "~View", -menuitems => [
            [Button => "Zoom ~in", -command => sub { zoom_in($c) }],
            [Button => "Zoom ~out", -command => sub { zoom_out($c) }],
        ]],
        [Cascade => "~Help", -menuitems => [
            [Button => "~About", -command => sub {
                 $mw->messageBox(
                     -icon => "info",
                     -message => "tkgvizmakefile\n(c)2002,2003 by Slaven Rezic",
                     -type => "ok"
                 );
             }],
            [Button => "tkgvizmakefile Doc", -command => sub {
                 require Tk::Pod;
                 $mw->Pod(-file => $0);
             }],
            [Button => "GraphViz::Makefile Doc", -command => sub {
                 require Tk::Pod;
                 $mw->Pod(-file => "GraphViz::Makefile");
             }],
        ]],
    ]));
    $mw->bind('<Key-q>' => [$mw, 'destroy']);
    $c = $mw->Scrolled("GraphViz", -scrollbars => "osoe", -background => 'white');
    $c->createBindings;
    $c->bind('node', '<Button-1>', sub {
        my @tags = $c->gettags('current');
        push @tags, undef unless (@tags % 2) == 0;
        my %tags = @tags;
        printf "Clicked node: '%s' => %s\n", $tags{node}, $tags{label};
    });
    $c->itemconfigure('edge', -activefill => 'green');
    $c->pack(-fill=>"both", -expand=>1);
    $mw->Advertise(Graph => $c);
    draw_graph($mw, $graphviz);
    my @c = $c->coords("$prefix$rule");
    $c->idletasks;
    $c->center_view($c[0],$c[1]);
    &Tk::MainLoop;
}

sub draw_graph {
    my ($w, $graphviz) = @_;
    my $c = $w->Subwidget("Graph");
    $c->show($graphviz);
}

sub zoom_in {
    my $c = shift;
    zoom_any($c, 1.5);
}

sub zoom_out {
    my $c = shift;
    zoom_any($c, 1/1.5);
}

sub zoom_any {
    my ($c, $scalefactor) = @_;
    $c->scale("all", 0, 0, $scalefactor, $scalefactor);
    my @scrollregion = @{ $c->cget(-scrollregion) };
    foreach (@scrollregion) { $_ *= $scalefactor }
    $c->configure(-scrollregion => \@scrollregion);
    my $canvas_font = $c->{OrigFont};
    if (!$canvas_font) {
        require Tk::Font;
        my $text_item = ($c->find(withtag => "rule"))[0];
        if (defined $text_item) {
            $canvas_font = $c->{OrigFont}
                = $c->fontCreate("rulefont",
                                 $c->fontActual($c->itemcget($text_item, "-font")));
            $c->{WantFontSize} = $c->fontActual("rulefont", "-size");
            $c->itemconfigure("rule", -font => "rulefont");
        }
    }
    my $curr_size = $c->{WantFontSize};
    my $new_size = $curr_size * $scalefactor;
    $c->{WantFontSize} = $new_size;
    if ($new_size > 0 && $new_size < 6) { $new_size = 6 }
    if ($new_size < 0 && $new_size > -6) { $new_size = -6 }
    $c->fontConfigure("rulefont", -size => $new_size);
}

sub choose_new_file {
    my ($w, $prefix, $reversed, $gm_args) = @_;
    my $new_file = $w->getOpenFile;
    if (defined $new_file) {
        my $graphviz = generate_graphviz($new_file, $prefix, $reversed, $gm_args);
        draw_graph($w, $graphviz);
    }
}

=head1 NAME

tkgvizmakefile - create Tk graphs from Makefiles

=head1 SYNOPSIS

    tkgvizmakefile [-f makefile] [-T output] [-o outputfile]
                   [-reversed] [-prefix prefix] [rule]

=head1 DESCRIPTION

Uses L<Tk::GraphViz> to visualise the given makefile.

=head1 OPTIONS

=over

=item -f F<makefile>

Use another makefile. Default is C<Makefile>

=item -T I<output>

Choose an output type. Every GraphViz-supported output type is
possible (see the description for the C<-T> option in the dot manpage)
and there is additionally the C<tkcanvas> type for dumping the graph
to a Canvas widget.

=item -o F<outputfile>

Write the output to the named file. Ignored for the C<tkcanvas> type.

=item -reversed

Reverse the arrows.

=item -prefix I<prefix>

Add the given prefix to each rule

=item rule

Start graph output from the named Makefile rule. If missing, the
C<all> or first rule is used.

=back

=head1 SEE ALSO

L<dot(1)>, L<GraphViz2>, L<GraphViz::Makefile>, L<Tk>, L<Tk::GraphViz>.

=cut

